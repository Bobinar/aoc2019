from time import sleep

import keyboard
import os

def count_spaces(world):
    count = 0
    for i in range(len(world)):
        for j in range(len(world[i])):
            if world[i][j] == '.':
                count = count + 1
    return count

def oxygen_fill():
    full_world
    full_world_dict = {(0, -1): '.', (0, -2): '.', (1, -1): '#', (-1, -2): '.', (-2, -2): '.', (-3, -2): '#', (-2, -1): '.', (-2, 0): '.', (-1, 0): '#', (-2, -3): '#', (-1, -1): '#', (1, -2): '#', (0, -3): '#', (-3, -1): '#', (-1, -3): '#', (-3, 0): '#', (0, 0): '.', (0, 1): '#', (1, 0): '#', (-2, 1): '.', (-2, 2): '.', (-2, 3): '#', (-1, 2): '.', (0, 2): '.', (1, 2): '.', (1, 1): '#', (-1, 1): '#', (-3, 1): '#', (-3, 2): '#', (-1, 3): '#', (0, 3): '#', (1, 3): '#', (2, 2): '.', (2, 3): '.', (2, 4): '.', (3, 4): '#', (2, 5): '.', (2, 6): '.', (3, 6): '#', (2, 7): '.', (3, 7): '#', (2, 1): '#', (3, 2): '#', (3, 5): '#', (3, 3): '#', (1, 5): '#', (2, 8): '.', (2, 9): '.', (1, 9): '#', (1, 7): '#', (1, 6): '#', (1, 4): '#', (1, 8): '#', (2, 10): '.', (1, 10): '.', (1, 11): '#', (3, 10): '#', (3, 9): '#', (3, 8): '#', (2, 11): '#', (0, 10): '.', (0, 9): '#', (-1, 10): '.', (-2, 10): '.', (-2, 9): '.', (-2, 8): '.', (-2, 7): '#', (-1, 8): '#', (-1, 9): '#', (-3, 8): '.', (-4, 8): '.', (-4, 7): '#', (-5, 8): '#', (-4, 9): '.', (-4, 10): '.', (-3, 10): '#', (-3, 7): '#', (-1, 11): '#', (0, 11): '#', (-2, 11): '#', (-3, 9): '#', (-5, 10): '#', (-4, 11): '.', (-4, 12): '.', (-4, 13): '.', (-4, 14): '.', (-5, 14): '.', (-6, 14): '.', (-6, 13): '#', (-7, 14): '.', (-8, 14): '.', (-8, 13): '.', (-7, 13): '#', (-8, 12): '.', (-3, 14): '#', (-3, 13): '#', (-3, 12): '#', (-5, 9): '#', (-5, 11): '#', (-4, 15): '#', (-5, 12): '#', (-5, 15): '#', (-5, 13): '#', (-6, 15): '#', (-7, 15): '#', (-8, 15): '#', (-9, 14): '#', (-3, 11): '#', (-9, 13): '#', (-9, 12): '.', (-10, 12): '.', (-11, 12): '#', (-7, 12): '#', (-8, 11): '#', (-9, 11): '#', (-10, 11): '.', (-11, 11): '#', (-10, 10): '.', (-11, 10): '#', (-10, 9): '.', (-10, 8): '.', (-11, 8): '.', (-11, 7): '#', (-12, 8): '.', (-13, 8): '.', (-13, 9): '#', (-14, 8): '.', (-14, 9): '.', (-14, 10): '.', (-15, 10): '.', (-15, 11): '#', (-13, 10): '#', (-13, 7): '#', (-12, 7): '#', (-10, 7): '#', (-11, 9): '#', (-12, 9): '#', (-9, 8): '#', (-10, 13): '#', (-9, 9): '#', (-9, 10): '#', (-14, 7): '#', (-15, 8): '#', (-15, 9): '#', (-14, 11): '#', (-16, 10): '.', (-17, 10): '#', (-16, 9): '.', (-16, 8): '.', (-17, 8): '#', (-16, 11): '#', (-16, 7): '.', (-17, 7): '#', (-17, 9): '#', (-16, 6): '.', (-16, 5): '#', (-15, 6): '.', (-15, 5): '#', (-14, 6): '.', (-13, 6): '.', (-15, 7): '#', (-17, 6): '#', (-14, 5): '#', (-13, 5): '#', (-12, 6): '.', (-12, 5): '.', (-11, 5): '#', (-12, 4): '.', (-11, 4): '.', (-11, 3): '#', (-10, 4): '.', (-9, 4): '#', (-10, 5): '.', (-10, 6): '.', (-9, 6): '.', (-8, 6): '.', (-7, 6): '#', (-8, 5): '.', (-8, 4): '.', (-8, 3): '#', (-9, 5): '#', (-11, 6): '#', (-10, 3): '#', (-12, 3): '#', (-13, 4): '#', (-9, 7): '#', (-7, 4): '.', (-7, 3): '#', (-6, 4): '.', (-6, 5): '#', (-5, 4): '#', (-7, 5): '#', (-6, 3): '.', (-6, 2): '.', (-5, 2): '#', (-6, 1): '.', (-6, 0): '.', (-5, 0): '#', (-5, 3): '#', (-7, 2): '#', (-7, 0): '.', (-7, -1): '#', (-8, 0): '.', (-8, -1): '.', (-9, -1): '#', (-8, 1): '#', (-9, 0): '#', (-7, 1): '#', (-6, -1): '#', (-5, 1): '#', (-8, -2): '.', (-7, -2): '#', (-8, -3): '.', (-8, -4): '.', (-9, -4): '#', (-9, -2): '#', (-8, -5): '#', (-7, -4): '.', (-6, -4): '.', (-6, -3): '#', (-5, -4): '#', (-7, -3): '#', (-9, -3): '#', (-7, -5): '#', (-6, -5): '.', (-6, -6): '.', (-5, -5): '#', (-7, -6): '#', (-5, -6): '#', (-8, 7): '#', (-6, -7): '.', (-6, -8): '.', (-6, -9): '#', (-5, -8): '.', (-4, -8): '.', (-4, -7): '#', (-3, -8): '#', (-7, -7): '#', (-7, -8): '#', (-5, -7): '#', (-4, -9): '.', (-3, -9): '#', (-4, -10): '.', (-5, -10): '#', (-4, -11): '#', (-5, -9): '#', (-3, -10): '.', (-2, -10): '.', (-2, -9): '#', (-1, -10): '.', (0, -10): '.', (0, -9): '#', (1, -10): '#', (0, -11): '.', (-1, -11): '#', (0, -12): '.', (-1, -12): '.', (-1, -13): '#', (-2, -12): '.', (-3, -12): '#', (-2, -13): '.', (-3, -13): '#', (-2, -14): '.', (-3, -14): '#', (-2, -15): '#', (-2, -11): '#', (-1, -9): '#', (-3, -11): '#', (1, -12): '#', (0, -13): '#', (1, -11): '#', (-1, -14): '.', (0, -14): '.', (1, -14): '.', (1, -15): '#', (-1, -15): '#', (0, -15): '#', (2, -14): '.', (2, -15): '#', (3, -14): '#', (2, -13): '.', (2, -12): '.', (2, -11): '#', (3, -12): '.', (4, -12): '.', (4, -13): '#', (1, -13): '#', (5, -12): '.', (6, -12): '.', (6, -13): '#', (3, -11): '#', (4, -11): '#', (3, -13): '#', (5, -13): '#', (5, -11): '#', (6, -11): '.', (6, -10): '.', (7, -12): '#', (7, -11): '#', (6, -9): '#', (7, -10): '#', (5, -10): '.', (4, -10): '.', (4, -9): '.', (3, -9): '#', (4, -8): '.', (4, -7): '.', (4, -6): '.', (5, -6): '#', (3, -7): '#', (5, -8): '#', (5, -7): '#', (3, -8): '#', (3, -10): '#', (5, -9): '#', (4, -5): '.', (3, -5): '#', (4, -4): '.', (3, -4): '#', (4, -3): '#', (3, -6): '#', (5, -4): '.', (5, -3): '#', (6, -4): '.', (7, -4): '.', (7, -5): '#', (8, -4): '.', (8, -5): '.', (9, -5): '#', (8, -3): '#', (7, -3): '#', (6, -3): '#', (6, -5): '#', (5, -5): '#', (9, -4): '#', (8, -6): '.', (7, -6): '.', (6, -6): '.', (9, -6): '#', (8, -7): '#', (6, -7): '.', (6, -8): '.', (7, -8): '.', (7, -7): '#', (7, -9): '#', (8, -8): '.', (8, -9): '.', (9, -8): '#', (9, -9): '#', (8, -10): '.', (9, -10): '.', (9, -11): '#', (8, -11): '#', (10, -10): '.', (11, -10): '#', (10, -9): '.', (10, -11): '#', (10, -8): '.', (11, -9): '#', (10, -7): '#', (11, -8): '.', (11, -7): '#', (12, -8): '.', (12, -9): '#', (13, -8): '.', (12, -7): '#', (14, -8): '.', (14, -7): '#', (14, -9): '.', (13, -9): '#', (15, -9): '#', (13, -7): '#', (15, -8): '#', (14, -10): '.', (14, -11): '.', (14, -12): '.', (14, -13): '.', (15, -12): '#', (15, -10): '#', (15, -11): '#', (13, -12): '#', (13, -10): '#', (13, -11): '#', (13, -13): '#', (15, -13): '#', (14, -14): '.', (14, -15): '#', (15, -14): '#', (13, -14): '.', (12, -14): '.', (11, -14): '.', (11, -15): '#', (12, -15): '#', (13, -15): '#', (10, -14): '.', (10, -15): '#', (12, -13): '#', (9, -14): '.', (8, -14): '.', (8, -13): '.', (8, -12): '.', (9, -12): '.', (10, -12): '.', (11, -12): '.', (12, -12): '.', (12, -11): '.', (12, -10): '.', (11, -13): '#', (9, -13): '#', (10, -13): '#', (7, -13): '#', (7, -14): '.', (7, -15): '#', (9, -15): '#', (8, -15): '#', (6, -14): '.', (6, -15): '.', (5, -15): '#', (5, -14): '#', (11, -11): '#', (6, -16): '.', (6, -17): '#', (7, -16): '#', (5, -16): '.', (5, -17): '#', (4, -16): '.', (3, -16): '#', (4, -17): '.', (4, -18): '.', (4, -15): '.', (4, -14): '.', (3, -15): '#', (3, -18): '#', (3, -17): '#', (4, -19): '.', (3, -19): '#', (4, -20): '.', (3, -20): '.', (2, -20): '.', (2, -21): '#', (1, -20): '.', (1, -19): '#', (5, -20): '#', (4, -21): '#', (5, -19): '#', (5, -18): '#', (1, -21): '#', (3, -21): '#', (0, -20): '.', (0, -21): '#', (-1, -20): '.', (-1, -21): '#', (-2, -20): '.', (-2, -19): '#', (0, -19): '#', (-1, -19): '#', (-3, -20): '.', (-3, -19): '#', (2, -19): '#', (-2, -21): '#', (-4, -20): '.', (-3, -21): '#', (-4, -21): '#', (-5, -20): '.', (-5, -21): '#', (-5, -19): '#', (-4, -19): '#', (-6, -20): '.', (-6, -21): '#', (-6, -19): '.', (-7, -20): '#', (-7, -19): '#', (-6, -18): '.', (-6, -17): '.', (-6, -16): '.', (-6, -15): '#', (-5, -17): '#', (-5, -16): '.', (-4, -16): '.', (-4, -17): '.', (-4, -18): '.', (-5, -18): '#', (-3, -17): '#', (-4, -15): '.', (-4, -14): '.', (-4, -13): '.', (-3, -15): '#', (-3, -16): '#', (-3, -18): '.', (-2, -18): '.', (-1, -18): '#', (-2, -17): '.', (-1, -17): '#', (-2, -16): '.', (-1, -16): '.', (0, -16): '.', (1, -16): '.', (2, -16): '.', (2, -17): '.', (1, -17): '#', (2, -18): '.', (1, -18): '.', (0, -18): '.', (0, -17): '#', (-4, -12): '.', (-5, -12): '.', (-6, -12): '.', (-7, -12): '.', (-5, -13): '#', (-5, -14): '#', (-5, -15): '#', (-6, -13): '#', (-7, -13): '#', (-8, -12): '.', (-8, -13): '.', (-8, -14): '.', (-9, -14): '#', (-8, -15): '.', (-9, -15): '#', (-8, -16): '.', (-8, -17): '#', (-7, -15): '#', (-7, -16): '#', (-7, -14): '.', (-6, -14): '.', (-7, -17): '#', (-7, -18): '#', (-5, -11): '#', (-6, -11): '#', (-7, -11): '#', (-8, -11): '#', (-9, -12): '#', (-9, -13): '#', (-9, -16): '.', (-10, -16): '.', (-9, -17): '#', (-10, -17): '.', (-11, -17): '#', (-10, -18): '.', (-10, -19): '#', (-11, -18): '.', (-11, -19): '#', (-9, -18): '#', (-12, -18): '.', (-12, -17): '.', (-13, -17): '#', (-12, -16): '.', (-11, -16): '#', (-12, -15): '#', (-13, -16): '.', (-12, -19): '#', (-10, -15): '#', (-13, -18): '#', (-13, -15): '#', (-14, -16): '.', (-14, -15): '#', (-15, -16): '#', (-14, -17): '.', (-14, -18): '.', (-14, -19): '.', (-15, -19): '#', (-14, -20): '.', (-13, -20): '.', (-15, -18): '#', (-15, -17): '#', (-15, -20): '.', (-15, -21): '#', (-16, -20): '.', (-16, -21): '#', (-17, -20): '.', (-17, -21): '#', (-12, -20): '.', (-12, -21): '#', (-14, -21): '#', (-13, -21): '#', (-11, -20): '.', (-10, -20): '.', (-9, -20): '.', (-9, -21): '#', (-11, -21): '#', (-10, -21): '#', (-8, -20): '.', (-8, -19): '.', (-8, -18): '.', (-8, -21): '#', (-9, -19): '#', (-18, -20): '.', (-19, -20): '.', (-20, -20): '.', (-21, -20): '#', (-18, -21): '#', (-19, -21): '#', (-20, -21): '#', (-19, -19): '#', (-18, -19): '#', (-17, -19): '#', (-16, -19): '#', (-13, -19): '#', (-20, -19): '.', (-21, -19): '#', (-20, -18): '.', (-21, -18): '#', (-20, -17): '#', (-19, -18): '.', (-18, -18): '.', (-17, -18): '.', (-16, -18): '.', (-16, -17): '.', (-16, -16): '.', (-16, -15): '#', (-18, -17): '#', (-19, -17): '#', (-17, -16): '.', (-17, -15): '#', (-18, -16): '.', (-18, -15): '.', (-19, -15): '#', (-19, -16): '#', (-17, -17): '#', (-18, -14): '.', (-19, -14): '#', (-18, -13): '.', (-19, -13): '#', (-18, -12): '.', (-19, -12): '#', (-17, -12): '.', (-16, -12): '.', (-16, -13): '#', (-17, -13): '#', (-17, -14): '#', (-18, -11): '#', (-17, -11): '#', (-16, -11): '#', (-15, -12): '.', (-14, -12): '.', (-14, -13): '#', (-13, -12): '.', (-12, -12): '.', (-15, -13): '#', (-12, -13): '.', (-12, -14): '.', (-13, -14): '.', (-14, -14): '.', (-15, -14): '.', (-16, -14): '8', (-13, -13): '#', (-11, -14): '.', (-11, -13): '#', (-10, -14): '.', (-10, -13): '.', (-10, -12): '.', (-10, -11): '.', (-11, -11): '#', (-10, -10): '.', (-9, -10): '.', (-8, -10): '.', (-7, -10): '.', (-7, -9): '#', (-11, -10): '#', (-9, -11): '#', (-12, -11): '#', (-11, -12): '#', (-13, -11): '#', (-14, -11): '#', (-15, -11): '#', (-15, -15): '#', (-11, -15): '#', (-10, -9): '#', (-9, -9): '#', (-8, -9): '.', (-8, -8): '.', (-8, -7): '.', (-8, -6): '.', (-6, -10): '.', (-9, -7): '#', (-9, -6): '.', (-9, -5): '#', (-10, -6): '.', (-11, -6): '.', (-11, -7): '#', (-12, -6): '.', (-13, -6): '#', (-12, -7): '#', (-9, -8): '#', (-10, -5): '#', (-10, -7): '#', (-11, -5): '#', (-12, -5): '.', (-12, -4): '.', (-13, -4): '#', (-12, -3): '.', (-13, -3): '#', (-13, -5): '#', (-11, -4): '#', (-11, -3): '#', (-12, -2): '.', (-11, -2): '.', (-10, -2): '.', (-10, -1): '.', (-10, 0): '.', (-10, 1): '.', (-9, 1): '#', (-10, -3): '.', (-10, -4): '.', (-11, -1): '#', (-11, 0): '#', (-10, 2): '.', (-11, 2): '.', (-12, 2): '.', (-13, 2): '.', (-13, 3): '#', (-11, 1): '#', (-9, 2): '.', (-13, -2): '#', (-12, -1): '#', (-12, 1): '#', (-14, 2): '.', (-14, 1): '#', (-13, 1): '#', (-14, 3): '#', (-15, 2): '.', (-16, 2): '.', (-16, 3): '.', (-15, 3): '#', (-16, 4): '.', (-15, 4): '.', (-14, 4): '.', (-17, 4): '.', (-18, 4): '.', (-18, 3): '.', (-19, 3): '#', (-17, 3): '#', (-18, 2): '.', (-18, 1): '#', (-17, 2): '#', (-16, 1): '#', (-15, 1): '#', (-8, 2): '.', (-9, 3): '#', (-18, 5): '#', (-17, 5): '#', (-19, 4): '#', (-19, 2): '.', (-19, 1): '#', (-20, 2): '.', (-20, 1): '.', (-20, 0): '.', (-21, 0): '#', (-20, -1): '.', (-21, -1): '#', (-20, -2): '.', (-19, -2): '#', (-19, -1): '#', (-20, -3): '.', (-19, -3): '#', (-20, -4): '.', (-19, -4): '.', (-18, -4): '.', (-18, -3): '#', (-18, -5): '#', (-19, 0): '#', (-21, 1): '#', (-21, -2): '#', (-21, -3): '#', (-21, -4): '#', (-20, -5): '#', (-19, -5): '#', (-17, -4): '.', (-16, -4): '.', (-15, -4): '#', (-16, -5): '.', (-17, -5): '#', (-16, -6): '.', (-17, -6): '.', (-15, -6): '#', (-16, -3): '#', (-17, -3): '#', (-15, -5): '#', (-16, -7): '#', (-17, -7): '#', (-18, -6): '.', (-18, -7): '.', (-19, -7): '#', (-18, -8): '.', (-19, -8): '#', (-18, -9): '#', (-17, -8): '.', (-17, -9): '#', (-16, -8): '.', (-16, -9): '#', (-15, -8): '.', (-15, -9): '#', (-14, -8): '.', (-13, -8): '.', (-13, -9): '#', (-12, -8): '.', (-12, -9): '.', (-11, -9): '#', (-12, -10): '.', (-13, -10): '.', (-14, -10): '.', (-15, -10): '.', (-16, -10): '.', (-17, -10): '.', (-18, -10): '.', (-19, -10): '.', (-11, -8): '.', (-10, -8): '.', (-13, -7): '#', (-15, -7): '#', (-14, -7): '.', (-14, -6): '.', (-14, -5): '.', (-14, -4): '.', (-14, -3): '.', (-14, -2): '.', (-14, -1): '#', (-15, -2): '.', (-16, -2): '.', (-17, -2): '#', (-16, -1): '.', (-16, 0): '.', (-15, 0): '.', (-14, 0): '.', (-15, -1): '#', (-17, 0): '.', (-18, 0): '.', (-18, -1): '.', (-18, -2): '.', (-17, -1): '#', (-17, 1): '#', (-15, -3): '#', (-14, -9): '#', (-13, 0): '.', (-12, 0): '.', (-13, -1): '#', (-19, -6): '#', (-20, -10): '.', (-21, -10): '#', (-19, -11): '#', (-19, -9): '#', (-20, -9): '.', (-20, -8): '.', (-20, -7): '.', (-20, -6): '.', (-20, -11): '.', (-20, -12): '.', (-20, -13): '.', (-20, -14): '.', (-20, -15): '.', (-20, -16): '.', (-21, -16): '#', (-21, -15): '#', (-21, -13): '#', (-21, -12): '#', (-21, -11): '#', (-21, -14): '#', (-21, -7): '#', (-21, -6): '#', (-21, -8): '#', (-21, -9): '#', (-21, 2): '#', (-20, 3): '.', (-20, 4): '.', (-21, 4): '#', (-20, 5): '.', (-21, 5): '#', (-21, 3): '#', (-19, 5): '#', (-20, 6): '.', (-20, 7): '#', (-21, 6): '#', (-19, 6): '.', (-18, 6): '.', (-18, 7): '.', (-19, 7): '#', (-18, 8): '.', (-18, 9): '.', (-18, 10): '.', (-19, 8): '#', (-19, 10): '.', (-19, 11): '#', (-20, 10): '.', (-20, 9): '.', (-20, 8): '.', (-19, 9): '#', (-21, 8): '#', (-21, 10): '#', (-21, 9): '#', (-20, 11): '.', (-21, 11): '#', (-20, 12): '.', (-20, 13): '#', (-21, 12): '#', (-19, 12): '.', (-18, 12): '.', (-17, 12): '#', (-18, 11): '#', (-18, 13): '.', (-18, 14): '.', (-19, 13): '#', (-19, 14): '#', (-18, 15): '.', (-19, 15): '#', (-17, 15): '#', (-17, 14): '#', (-17, 13): '#', (-18, 16): '.', (-18, 17): '.', (-18, 18): '.', (-18, 19): '#', (-17, 17): '#', (-17, 18): '.', (-16, 18): '.', (-19, 18): '.', (-20, 18): '.', (-21, 18): '#', (-20, 17): '.', (-20, 16): '.', (-20, 15): '.', (-20, 14): '.', (-21, 14): '#', (-21, 15): '#', (-21, 17): '#', (-20, 19): '#', (-21, 16): '#', (-19, 16): '#', (-19, 17): '#', (-19, 19): '#', (-17, 19): '#', (-16, 19): '#', (-16, 17): '.', (-16, 16): '.', (-16, 15): '.', (-16, 14): '.', (-16, 13): '.', (-16, 12): '.', (-17, 16): '#', (-15, 18): '#', (-15, 15): '#', (-15, 17): '#', (-15, 16): '#', (-15, 14): '#', (-15, 13): '#', (-15, 12): '.', (-14, 12): '.', (-13, 12): '.', (-13, 13): '#', (-13, 11): '#', (-12, 12): '.', (-12, 11): '.', (-12, 10): '.', (-12, 13): '.', (-12, 14): '.', (-13, 14): '.', (-14, 14): '.', (-14, 13): '#', (-14, 15): '.', (-14, 16): '.', (-14, 17): '.', (-13, 15): '#', (-12, 15): '#', (-11, 14): '#', (-11, 13): '#', (-14, 18): '.', (-14, 19): '#', (-13, 18): '.', (-13, 19): '#', (-12, 18): '.', (-12, 17): '#', (-13, 17): '#', (-13, 16): '#', (-11, 18): '.', (-11, 19): '#', (-12, 19): '#', (-10, 18): '.', (-10, 19): '#', (-10, 17): '#', (-11, 17): '#', (-9, 18): '.', (-8, 18): '.', (-8, 19): '#', (-9, 19): '#', (-9, 17): '#', (-8, 17): '.', (-8, 16): '.', (-9, 16): '.', (-10, 16): '.', (-11, 16): '.', (-12, 16): '.', (-10, 15): '.', (-10, 14): '.', (-11, 15): '#', (-9, 15): '#', (-7, 16): '.', (-7, 17): '#', (-7, 18): '#', (-6, 16): '.', (-6, 17): '#', (-5, 16): '.', (-5, 17): '#', (-4, 16): '.', (-4, 17): '.', (-4, 18): '.', (-4, 19): '#', (-5, 18): '.', (-5, 19): '#', (-6, 18): '.', (-6, 19): '#', (-3, 18): '.', (-3, 19): '#', (-2, 18): '.', (-2, 17): '.', (-2, 16): '.', (-2, 15): '#', (-3, 16): '#', (-3, 17): '#', (-1, 18): '#', (-1, 16): '.', (0, 16): '.', (0, 15): '.', (0, 14): '.', (0, 13): '#', (-1, 14): '#', (0, 17): '#', (-1, 17): '#', (-2, 19): '#', (-1, 15): '#', (1, 14): '.', (2, 14): '.', (2, 13): '.', (2, 12): '.', (1, 12): '.', (0, 12): '.', (-1, 12): '.', (-1, 13): '#', (-2, 12): '.', (-2, 13): '.', (-2, 14): '.', (1, 13): '#', (2, 15): '#', (1, 15): '#', (1, 16): '#', (3, 14): '#', (3, 13): '#', (3, 12): '.', (4, 12): '.', (4, 11): '.', (3, 11): '#', (4, 10): '.', (4, 9): '#', (5, 10): '.', (5, 9): '#', (4, 13): '#', (5, 12): '#', (5, 11): '#', (6, 10): '.', (6, 9): '.', (6, 8): '.', (6, 7): '#', (5, 8): '#', (6, 11): '#', (7, 10): '#', (7, 8): '.', (7, 9): '#', (8, 8): '.', (8, 7): '.', (8, 6): '.', (8, 5): '#', (7, 6): '#', (7, 7): '#', (8, 9): '#', (9, 6): '.', (9, 7): '#', (9, 8): '#', (10, 6): '.', (10, 5): '#', (9, 5): '#', (10, 7): '.', (10, 8): '.', (10, 9): '.', (10, 10): '.', (10, 11): '.', (10, 12): '.', (10, 13): '#', (9, 9): '#', (9, 11): '#', (9, 12): '#', (9, 10): '#', (11, 11): '#', (11, 12): '.', (11, 10): '#', (11, 9): '#', (11, 7): '#', (11, 6): '#', (11, 8): '#', (12, 12): '.', (12, 13): '.', (11, 13): '#', (12, 14): '.', (11, 14): '.', (11, 15): '#', (10, 14): '.', (10, 15): '.', (10, 16): '.', (10, 17): '#', (9, 14): '#', (13, 14): '#', (12, 11): '#', (13, 12): '#', (13, 13): '#', (12, 15): '#', (9, 16): '.', (9, 17): '#', (8, 16): '.', (8, 15): '#', (9, 15): '#', (11, 16): '#', (8, 17): '.', (7, 17): '#', (7, 16): '#', (8, 18): '.', (8, 19): '#', (7, 18): '.', (7, 19): '#', (9, 18): '.', (10, 18): '.', (10, 19): '#', (11, 18): '.', (9, 19): '#', (6, 18): '.', (5, 18): '.', (4, 18): '.', (4, 19): '#', (5, 19): '#', (6, 19): '#', (4, 17): '#', (6, 17): '#', (3, 18): '.', (2, 18): '.', (2, 17): '.', (3, 17): '#', (1, 17): '#', (2, 16): '.', (1, 18): '.', (1, 19): '#', (0, 18): '.', (0, 19): '#', (2, 19): '#', (3, 16): '.', (4, 16): '.', (5, 16): '.', (6, 16): '.', (6, 15): '.', (6, 14): '.', (5, 14): '.', (5, 13): '#', (4, 14): '.', (4, 15): '#', (5, 15): '#', (7, 14): '#', (6, 13): '.', (6, 12): '.', (7, 12): '.', (8, 12): '.', (8, 13): '.', (9, 13): '#', (8, 14): '.', (8, 11): '.', (8, 10): '.', (7, 13): '#', (7, 11): '#', (7, 15): '#', (5, 17): '#', (3, 15): '#', (3, 19): '#', (11, 17): '#', (12, 18): '.', (12, 17): '.', (12, 16): '.', (12, 19): '#', (13, 18): '#', (13, 16): '.', (14, 16): '.', (14, 17): '.', (13, 17): '#', (14, 18): '.', (14, 19): '#', (15, 18): '.', (16, 18): '.', (16, 17): '.', (15, 17): '#', (16, 16): '.', (16, 15): '#', (15, 16): '#', (13, 15): '#', (14, 15): '#', (16, 19): '#', (17, 18): '#', (15, 19): '#', (17, 17): '#', (17, 16): '.', (17, 15): '#', (18, 16): '.', (19, 16): '#', (18, 15): '.', (19, 15): '#', (18, 17): '.', (18, 18): '.', (18, 19): '#', (19, 18): '#', (19, 17): '#', (11, 19): '#', (18, 14): '.', (19, 14): '#', (18, 13): '.', (19, 13): '#', (18, 12): '.', (19, 12): '#', (17, 14): '#', (17, 13): '#', (17, 12): '.', (17, 11): '#', (16, 12): '.', (16, 11): '#', (15, 12): '#', (18, 11): '#', (16, 13): '.', (16, 14): '.', (15, 13): '#', (15, 14): '.', (14, 14): '.', (14, 13): '.', (14, 12): '.', (14, 11): '.', (14, 10): '.', (14, 9): '.', (14, 8): '.', (14, 7): '.', (14, 6): '.', (14, 5): '#', (13, 6): '.', (12, 6): '.', (12, 7): '.', (12, 8): '.', (12, 9): '.', (12, 10): '.', (13, 10): '#', (13, 9): '#', (13, 8): '#', (13, 7): '#', (12, 5): '.', (12, 4): '.', (12, 3): '#', (11, 4): '#', (13, 5): '#', (13, 4): '.', (14, 4): '.', (14, 3): '#', (15, 7): '#', (15, 9): '#', (15, 10): '#', (15, 11): '#', (15, 6): '#', (13, 11): '#', (15, 15): '#', (15, 8): '#', (11, 5): '#', (13, 3): '#', (15, 4): '.', (16, 4): '.', (17, 4): '#', (16, 5): '#', (16, 3): '.', (15, 3): '#', (15, 5): '#', (16, 2): '.', (16, 1): '.', (17, 2): '#', (17, 3): '#', (15, 2): '#', (16, 0): '.', (15, 0): '.', (15, 1): '#', (17, 0): '#', (17, 1): '#', (16, -1): '#', (14, 0): '.', (14, -1): '#', (13, 0): '#', (15, -1): '#', (14, 1): '.', (14, 2): '.', (13, 2): '.', (12, 2): '.', (12, 1): '#', (11, 2): '.', (11, 3): '#', (11, 1): '#', (13, 1): '#', (10, 2): '.', (9, 2): '#', (10, 1): '.', (10, 3): '#', (10, 0): '.', (10, -1): '.', (10, -2): '.', (10, -3): '.', (9, -2): '.', (8, -2): '.', (8, -1): '.', (7, -1): '#', (8, 0): '.', (7, -2): '#', (9, 0): '#', (9, -3): '#', (11, -3): '#', (10, -4): '.', (10, -5): '.', (10, -6): '.', (11, -6): '.', (12, -6): '.', (12, -5): '.', (12, -4): '.', (12, -3): '.', (12, -2): '.', (11, -4): '#', (11, -5): '#', (11, -1): '#', (11, -2): '#', (11, 0): '#', (9, -1): '#', (8, 1): '.', (9, 1): '#', (8, 2): '.', (7, 2): '#', (7, 0): '#', (8, 3): '.', (7, 3): '#', (8, 4): '.', (9, 4): '.', (10, 4): '.', (9, 3): '#', (7, 4): '.', (6, 4): '.', (7, 1): '#', (7, 5): '#', (6, 5): '#', (5, 4): '.', (5, 5): '#', (4, 4): '.', (4, 5): '.', (4, 6): '.', (5, 6): '.', (6, 6): '.', (4, 3): '.', (5, 3): '#', (4, 7): '.', (4, 8): '.', (5, 7): '#', (4, 2): '.', (4, 1): '#', (5, 2): '.', (6, 2): '.', (6, 3): '#', (6, 1): '.', (6, 0): '.', (6, -1): '#', (5, 0): '.', (5, 1): '#', (4, 0): '.', (4, -1): '#', (5, -1): '#', (3, 0): '.', (3, -1): '#', (2, 0): '.', (3, 1): '#', (2, -1): '.', (2, -2): '.', (2, -3): '.', (2, -4): '.', (3, -3): '#', (3, -2): '.', (4, -2): '.', (5, -2): '.', (6, -2): '.', (2, -5): '#', (1, -4): '.', (0, -4): '.', (-1, -4): '#', (1, -3): '#', (1, -5): '#', (0, -5): '.', (-1, -5): '#', (0, -6): '.', (-1, -6): '.', (-1, -7): '#', (1, -6): '#', (0, -7): '#', (-2, -6): '.', (-2, -7): '.', (-2, -8): '.', (-1, -8): '.', (0, -8): '.', (1, -8): '.', (2, -8): '.', (2, -9): '.', (2, -10): '.', (2, -7): '.', (2, -6): '.', (1, -7): '#', (1, -9): '#', (-3, -6): '.', (-3, -5): '#', (-4, -6): '.', (-4, -5): '.', (-4, -4): '.', (-3, -4): '.', (-2, -4): '.', (-2, -5): '#', (-4, -3): '.', (-4, -2): '.', (-4, -1): '.', (-4, 0): '.', (-4, 1): '.', (-3, -3): '#', (-5, -3): '#', (-5, -1): '#', (-5, -2): '.', (-6, -2): '.', (-4, 2): '.', (-4, 3): '.', (-4, 4): '.', (-4, 5): '.', (-4, 6): '.', (-3, 6): '.', (-2, 6): '.', (-1, 6): '.', (0, 6): '.', (0, 5): '.', (0, 4): '.', (-1, 4): '.', (-2, 4): '.', (-3, 4): '#', (-2, 5): '#', (-1, 7): '#', (-3, 5): '#', (-1, 5): '#', (-3, 3): '#', (-5, 6): '.', (-5, 7): '#', (-6, 6): '.', (-5, 5): '#', (0, 7): '.', (0, 8): '.', (-6, 7): '.', (-7, 7): '#', (-6, 8): '.', (-7, 8): '#', (-6, 9): '.', (-7, 9): '#', (-6, 10): '.', (-6, 11): '.', (-7, 11): '#', (-6, 12): '.', (-7, 10): '.', (-8, 10): '.', (-8, 9): '.', (-8, 8): '.', (-3, -7): '#', (13, -6): '#', (13, -5): '#', (13, -4): '#', (13, -3): '#', (13, -2): '.', (13, -1): '#', (12, -1): '.', (12, 0): '.', (14, -2): '.', (15, -2): '.', (16, -2): '.', (17, -2): '.', (18, -2): '.', (19, -2): '#', (18, -3): '.', (18, -1): '.', (17, -1): '#', (18, 0): '.', (18, 1): '.', (17, -3): '#', (16, -3): '#', (14, -3): '#', (15, -3): '#', (18, -4): '.', (18, -5): '#', (17, -4): '.', (16, -4): '.', (19, -4): '#', (18, 2): '.', (19, -1): '#', (19, 0): '#', (19, 1): '#', (19, 2): '#', (18, 3): '.', (19, 3): '#', (18, 4): '.', (19, 4): '#', (18, 5): '.', (18, 6): '.', (18, 7): '.', (18, 8): '.', (18, 9): '#', (19, 7): '#', (19, 6): '#', (19, 5): '#', (19, 8): '#', (17, 8): '.', (17, 9): '#', (16, 8): '.', (16, 7): '.', (16, 9): '.', (16, 10): '.', (17, 10): '.', (18, 10): '.', (19, 10): '#', (16, 6): '.', (17, 6): '#', (17, 7): '#', (17, 5): '#', (19, -3): '#', (17, -5): '#', (15, -4): '#', (16, -5): '.', (15, -5): '#', (16, -6): '.', (15, -6): '.', (15, -7): '#', (14, -6): '.', (14, -5): '.', (14, -4): '.', (17, -6): '.', (17, -7): '#', (16, -7): '#', (18, -6): '.', (18, -7): '.', (18, -8): '.', (19, -8): '#', (18, -9): '.', (19, -9): '#', (19, -6): '#', (19, -7): '#', (17, -8): '#', (17, -9): '#', (18, -10): '.', (19, -10): '#', (17, -10): '.', (16, -10): '.', (16, -9): '.', (16, -8): '.', (16, -11): '.', (16, -12): '.', (16, -13): '.', (16, -14): '.', (16, -15): '#', (17, -13): '#', (17, -11): '#', (18, -11): '#', (17, -12): '#', (17, -14): '.', (18, -14): '.', (19, -14): '#', (18, -13): '.', (18, -12): '.', (19, -12): '#', (19, -13): '#', (18, -15): '.', (17, -15): '#', (18, -16): '.', (17, -16): '.', (19, -16): '#', (18, -17): '#', (19, -15): '#', (16, -16): '.', (16, -17): '.', (17, -17): '#', (15, -16): '#', (15, -17): '#', (16, -18): '.', (17, -18): '.', (18, -18): '.', (19, -18): '#', (18, -19): '.', (19, -19): '#', (18, -20): '.', (19, -20): '#', (18, -21): '#', (17, -20): '.', (17, -21): '#', (16, -20): '.', (15, -20): '.', (15, -19): '#', (14, -20): '.', (14, -19): '.', (14, -18): '.', (15, -18): '#', (14, -17): '#', (15, -21): '#', (14, -21): '#', (13, -20): '#', (16, -21): '#', (17, -19): '#', (16, -19): '#', (13, -19): '#', (13, -18): '.', (13, -17): '#', (12, -18): '.', (12, -17): '#', (11, -18): '.', (10, -18): '.', (9, -18): '#', (10, -19): '.', (11, -19): '#', (12, -19): '#', (9, -19): '#', (10, -20): '.', (11, -20): '.', (12, -20): '.', (12, -21): '#', (10, -21): '#', (9, -20): '.', (8, -20): '.', (8, -21): '#', (11, -21): '#', (9, -21): '#', (7, -20): '.', (7, -21): '#', (6, -20): '.', (6, -19): '.', (6, -18): '.', (7, -18): '.', (8, -18): '.', (8, -19): '#', (7, -19): '#', (8, -17): '.', (8, -16): '.', (9, -16): '.', (10, -16): '.', (11, -16): '.', (11, -17): '#', (12, -16): '.', (13, -16): '.', (14, -16): '.', (7, -17): '#', (9, -17): '#', (10, -17): '#', (6, -21): '#'}

    cool = False
    for i in range(len(full_world)):
        for j in range(len(full_world[i])):
            if full_world[i][j] == '8':
                full_world[i][j] = 'O'
                cool = True

    if not cool:
        raise Exception()




    minute = 0

    while count_spaces(full_world) > 0:
        for i in range(len(full_world)):
            for j in range(len(full_world[i])):
                if full_world[i][j] == 'O':
                    if full_world[i-1][j] == '.':
                        full_world[i-1][j] = 'N'
                    if full_world[i+1][j] == '.':
                        full_world[i+1][j] = 'N'
                    if full_world[i][j-1] == '.':
                        full_world[i][j-1] = 'N'
                    if full_world[i][j+1] == '.':
                        full_world[i][j+1] = 'N'
        for i in range(len(full_world)):
            for j in range(len(full_world[i])):
                if full_world[i][j] == 'N':
                    full_world[i][j] = 'O'
        minute = minute + 1

    print(minute)

    exit(0)

def find_path():
    world = {(0, 1): '#', (1, 0): '#', (0, -1): '.', (-1, -1): '#', (1, -1): '#', (0, 0): '.', (-1, 0): '#', (0, -2): '.', (0, -3): '#', (1, -2): '#', (-1, -2): '.', (-1, -3): '#', (-2, -2): '.', (-3, -2): '#', (-2, -3): '#', (-2, -1): '.', (-2, 0): '.', (-2, 1): '.', (-3, 1): '#', (-3, -1): '#', (-3, 0): '#', (-2, 2): '.', (-2, 3): '#', (-1, 2): '.', (0, 2): '.', (1, 2): '.', (2, 2): '.', (3, 2): '#', (2, 3): '.', (2, 4): '.', (2, 5): '.', (2, 6): '.', (2, 7): '.', (2, 8): '.', (2, 9): '.', (2, 10): '.', (2, 11): '#', (2, 1): '#', (1, 1): '#', (3, 3): '#', (3, 4): '#', (3, 6): '#', (3, 8): '#', (3, 9): '#', (3, 10): '#', (3, 7): '#', (1, 7): '#', (1, 5): '#', (1, 3): '#', (1, 4): '#', (-1, 3): '#', (0, 3): '#', (-1, 1): '#', (-3, 2): '#', (1, 6): '#', (1, 10): '.', (0, 10): '.', (0, 9): '#', (-1, 10): '.', (-2, 10): '.', (-2, 9): '.', (-3, 9): '#', (-1, 9): '#', (-2, 8): '.', (-2, 7): '#', (-1, 8): '#', (-2, 11): '#', (-1, 11): '#', (0, 11): '#', (1, 11): '#', (1, 9): '#', (1, 8): '#', (-3, 10): '#', (-3, 8): '.', (-3, 7): '#', (-4, 8): '.', (-5, 8): '#', (-4, 9): '.', (-4, 7): '#', (-5, 9): '#', (-4, 10): '.', (-5, 10): '#', (-4, 11): '.', (-4, 12): '.', (-5, 12): '#', (-3, 12): '#', (-3, 11): '#', (-4, 13): '.', (-4, 14): '.', (-4, 15): '#', (-3, 14): '#', (-3, 13): '#', (-5, 13): '#', (-5, 14): '.', (-6, 14): '.', (-7, 14): '.', (-8, 14): '.', (-9, 14): '#', (-6, 13): '#', (-7, 13): '#', (-8, 13): '.', (-8, 12): '.', (-9, 12): '.', (-10, 12): '.', (-10, 11): '.', (-9, 11): '#', (-7, 12): '#', (-6, 15): '#', (-5, 15): '#', (-7, 15): '#', (-8, 15): '#', (-8, 11): '#', (-10, 13): '#', (-11, 12): '#', (-10, 10): '.', (-11, 10): '#', (-10, 9): '.', (-10, 8): '.', (-11, 8): '.', (-12, 8): '.', (-12, 9): '#', (-13, 8): '.', (-13, 9): '#', (-14, 8): '.', (-14, 9): '.', (-15, 9): '#', (-14, 10): '.', (-14, 11): '#', (-13, 10): '#', (-15, 10): '.', (-16, 10): '.', (-16, 9): '.', (-16, 8): '.', (-15, 8): '#', (-14, 7): '#', (-13, 7): '#', (-11, 7): '#', (-12, 7): '#', (-10, 7): '#', (-9, 8): '#', (-9, 9): '#', (-9, 10): '#', (-11, 11): '#', (-11, 9): '#', (-15, 11): '#', (-16, 11): '#', (-16, 7): '.', (-16, 6): '.', (-16, 5): '#', (-17, 8): '#', (-17, 9): '#', (-17, 10): '#', (-17, 7): '#', (-17, 6): '#', (-15, 6): '.', (-14, 6): '.', (-13, 6): '.', (-12, 6): '.', (-15, 7): '#', (-14, 5): '#', (-15, 5): '#', (-13, 5): '#', (-11, 6): '#', (-12, 5): '.', (-12, 4): '.', (-13, 4): '#', (-12, 3): '#', (-11, 4): '.', (-10, 4): '.', (-9, 4): '#', (-10, 5): '.', (-10, 6): '.', (-9, 6): '.', (-8, 6): '.', (-11, 5): '#', (-10, 3): '#', (-11, 3): '#', (-8, 5): '.', (-7, 5): '#', (-9, 5): '#', (-8, 4): '.', (-8, 3): '#', (-7, 6): '#', (-7, 4): '.', (-6, 4): '.', (-5, 4): '#', (-6, 3): '.', (-6, 2): '.', (-6, 1): '.', (-6, 0): '.', (-6, -1): '#', (-7, 3): '#', (-7, 2): '#', (-7, 0): '.', (-7, -1): '#', (-8, 0): '.', (-8, 1): '#', (-9, 0): '#', (-7, 1): '#', (-5, 0): '#', (-5, 2): '#', (-6, 5): '#', (-5, 3): '#', (-5, 1): '#', (-8, -1): '.', (-9, -1): '#', (-8, -2): '.', (-9, -2): '#', (-8, -3): '.', (-9, -3): '#', (-7, -3): '#', (-7, -2): '#', (-8, -4): '.', (-8, -5): '#', (-9, -4): '#', (-7, -4): '.', (-6, -4): '.', (-6, -5): '.', (-5, -5): '#', (-6, -6): '.', (-6, -7): '.', (-6, -8): '.', (-6, -9): '#', (-5, -8): '.', (-5, -7): '#', (-4, -8): '.', (-7, -8): '#', (-7, -7): '#', (-7, -6): '#', (-7, -5): '#', (-5, -4): '#', (-5, -6): '#', (-4, -9): '.', (-4, -10): '.', (-4, -11): '#', (-5, -10): '#', (-5, -9): '#', (-4, -7): '#', (-3, -8): '#', (-3, -9): '#', (-3, -10): '.', (-3, -11): '#', (-2, -10): '.', (-2, -11): '#', (-1, -10): '.', (0, -10): '.', (1, -10): '#', (0, -11): '.', (-1, -11): '#', (1, -11): '#', (0, -9): '#', (0, -12): '.', (1, -12): '#', (-1, -12): '.', (-2, -12): '.', (-3, -12): '#', (-2, -13): '.', (-2, -14): '.', (-2, -15): '#', (-3, -14): '#', (-3, -13): '#', (-1, -13): '#', (-1, -14): '.', (0, -14): '.', (1, -14): '.', (1, -13): '#', (0, -13): '#', (0, -15): '#', (-1, -15): '#', (1, -15): '#', (2, -14): '.', (2, -15): '#', (3, -14): '#', (2, -13): '.', (2, -12): '.', (2, -11): '#', (3, -13): '#', (3, -12): '.', (3, -11): '#', (4, -12): '.', (4, -11): '#', (5, -12): '.', (6, -12): '.', (6, -11): '.', (6, -10): '.', (5, -11): '#', (6, -9): '#', (5, -10): '.', (4, -10): '.', (3, -10): '#', (4, -9): '.', (4, -8): '.', (3, -8): '#', (4, -7): '.', (4, -6): '.', (3, -6): '#', (4, -5): '.', (4, -4): '.', (3, -4): '#', (4, -3): '#', (3, -7): '#', (3, -9): '#', (7, -10): '#', (5, -9): '#', (5, -8): '#', (5, -6): '#', (5, -5): '#', (5, -4): '.', (5, -3): '#', (6, -4): '.', (7, -4): '.', (7, -5): '#', (3, -5): '#', (5, -7): '#', (6, -13): '#', (5, -13): '#', (4, -13): '#', (7, -12): '#', (7, -11): '#', (6, -5): '#', (6, -3): '#', (8, -4): '.', (8, -3): '#', (9, -4): '#', (8, -5): '.', (8, -6): '.', (8, -7): '#', (7, -3): '#', (9, -6): '#', (9, -5): '#', (7, -6): '.', (6, -6): '.', (6, -7): '.', (6, -8): '.', (7, -8): '.', (8, -8): '.', (7, -7): '#', (7, -9): '#', (9, -8): '#', (8, -9): '.', (8, -10): '.', (8, -11): '#', (9, -9): '#', (9, -10): '.', (10, -10): '.', (10, -11): '#', (11, -10): '#', (9, -11): '#', (10, -9): '.', (10, -8): '.', (11, -8): '.', (12, -8): '.', (13, -8): '.', (14, -8): '.', (15, -8): '#', (14, -9): '.', (13, -9): '#', (14, -10): '.', (14, -11): '.', (13, -11): '#', (12, -9): '#', (11, -9): '#', (11, -7): '#', (10, -7): '#', (12, -7): '#', (13, -7): '#', (14, -7): '#', (15, -9): '#', (15, -10): '#', (13, -10): '#', (15, -11): '#', (14, -12): '.', (13, -12): '#', (15, -12): '#', (14, -13): '.', (14, -14): '.', (14, -15): '#', (15, -13): '#', (15, -14): '#', (13, -14): '.', (13, -13): '#', (13, -15): '#', (12, -14): '.', (11, -14): '.', (10, -14): '.', (11, -13): '#', (12, -13): '#', (9, -14): '.', (9, -13): '#', (10, -13): '#', (8, -14): '.', (7, -14): '.', (7, -13): '#', (8, -13): '.', (8, -12): '.', (8, -15): '#', (9, -15): '#', (10, -15): '#', (11, -15): '#', (12, -15): '#', (7, -15): '#', (6, -14): '.', (5, -14): '#', (9, -12): '.', (10, -12): '.', (11, -12): '.', (12, -12): '.', (12, -11): '.', (12, -10): '.', (11, -11): '#', (6, -15): '.', (6, -16): '.', (6, -17): '#', (5, -16): '.', (5, -15): '#', (4, -16): '.', (7, -16): '#', (5, -17): '#', (3, -16): '#', (4, -15): '.', (4, -14): '.', (3, -15): '#', (4, -17): '.', (4, -18): '.', (4, -19): '.', (4, -20): '.', (5, -18): '#', (4, -21): '#', (5, -19): '#', (5, -20): '#', (3, -20): '.', (2, -20): '.', (2, -19): '#', (3, -18): '#', (3, -19): '#', (3, -17): '#', (3, -21): '#', (2, -21): '#', (1, -20): '.', (1, -21): '#', (0, -20): '.', (0, -21): '#', (-1, -20): '.', (-1, -21): '#', (-2, -20): '.', (-2, -21): '#', (-3, -20): '.', (-3, -21): '#', (-4, -20): '.', (-4, -21): '#', (-5, -20): '.', (-5, -19): '#', (-4, -19): '#', (-3, -19): '#', (-2, -19): '#', (-1, -19): '#', (0, -19): '#', (1, -19): '#', (-6, -20): '.', (-7, -20): '#', (-6, -19): '.', (-6, -18): '.', (-6, -17): '.', (-7, -17): '#', (-6, -16): '.', (-6, -15): '#', (-7, -16): '#', (-7, -18): '#', (-7, -19): '#', (-6, -21): '#', (-5, -21): '#', (-5, -18): '#', (-5, -17): '#', (-5, -16): '.', (-4, -16): '.', (-3, -16): '#', (-4, -15): '.', (-4, -17): '.', (-4, -18): '.', (-3, -18): '.', (-2, -18): '.', (-1, -18): '#', (-2, -17): '.', (-2, -16): '.', (-3, -17): '#', (-4, -14): '.', (-4, -13): '.', (-4, -12): '.', (-5, -13): '#', (-5, -15): '#', (-5, -14): '#', (-5, -12): '.', (-5, -11): '#', (-6, -12): '.', (-6, -11): '#', (-1, -16): '.', (0, -16): '.', (1, -16): '.', (2, -16): '.', (2, -17): '.', (2, -18): '.', (1, -18): '.', (0, -18): '.', (0, -17): '#', (1, -17): '#', (-1, -17): '#', (-7, -12): '.', (-8, -12): '.', (-8, -13): '.', (-8, -14): '.', (-7, -14): '.', (-6, -14): '.', (-6, -13): '#', (-7, -13): '#', (-8, -15): '.', (-7, -15): '#', (-8, -16): '.', (-8, -17): '#', (-9, -16): '.', (-10, -16): '.', (-11, -16): '#', (-10, -15): '#', (-9, -15): '#', (-9, -14): '#', (-9, -12): '#', (-8, -11): '#', (-9, -13): '#', (-9, -17): '#', (-10, -17): '.', (-11, -17): '#', (-10, -18): '.', (-10, -19): '#', (-9, -18): '#', (-11, -18): '.', (-12, -18): '.', (-13, -18): '#', (-12, -19): '#', (-11, -19): '#', (-12, -17): '.', (-12, -16): '.', (-13, -16): '.', (-13, -15): '#', (-14, -16): '.', (-14, -15): '#', (-15, -16): '#', (-12, -15): '#', (-14, -17): '.', (-14, -18): '.', (-15, -18): '#', (-14, -19): '.', (-14, -20): '.', (-15, -20): '.', (-15, -21): '#', (-16, -20): '.', (-16, -21): '#', (-13, -20): '.', (-12, -20): '.', (-11, -20): '.', (-11, -21): '#', (-10, -20): '.', (-9, -20): '.', (-8, -20): '.', (-8, -21): '#', (-10, -21): '#', (-12, -21): '#', (-13, -21): '#', (-14, -21): '#', (-17, -20): '.', (-17, -21): '#', (-18, -20): '.', (-19, -20): '.', (-19, -19): '#', (-17, -19): '#', (-18, -19): '#', (-20, -20): '.', (-20, -19): '.', (-21, -19): '#', (-20, -21): '#', (-21, -20): '#', (-16, -19): '#', (-15, -19): '#', (-13, -19): '#', (-13, -17): '#', (-20, -18): '.', (-20, -17): '#', (-19, -18): '.', (-18, -18): '.', (-18, -17): '#', (-17, -18): '.', (-17, -17): '#', (-16, -18): '.', (-16, -17): '.', (-16, -16): '.', (-16, -15): '#', (-17, -16): '.', (-17, -15): '#', (-18, -16): '.', (-19, -16): '#', (-18, -15): '.', (-18, -14): '.', (-17, -14): '#', (-18, -13): '.', (-18, -12): '.', (-18, -11): '#', (-15, -17): '#', (-21, -18): '#', (-19, -17): '#', (-19, -12): '#', (-19, -13): '#', (-19, -15): '#', (-19, -14): '#', (-17, -12): '.', (-16, -12): '.', (-15, -12): '.', (-15, -13): '#', (-14, -12): '.', (-13, -12): '.', (-13, -13): '#', (-14, -13): '#', (-16, -13): '#', (-17, -13): '#', (-12, -12): '.', (-12, -13): '.', (-11, -13): '#', (-12, -14): '.', (-13, -14): '.', (-11, -14): '.', (-11, -15): '#', (-14, -14): '.', (-15, -14): '.', (-16, -14): '8', (-10, -14): '.', (-10, -13): '.', (-10, -12): '.', (-10, -11): '.', (-10, -10): '.', (-10, -9): '#', (-11, -10): '#', (-11, -11): '#', (-11, -12): '#', (-9, -10): '.', (-8, -10): '.', (-7, -10): '.', (-6, -10): '.', (-8, -9): '.', (-8, -8): '.', (-8, -7): '.'}
    image = [['0', '#', '0', '0', '#', '#', '#', '#', '#', '#', '#', '#', '0', '#', '0', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '0', '0', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '0', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '#', '.', '#', '#', '0', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '0', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '0'], ['0', '0', '#', '.', '#', '8', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'], ['0', '0', '#', 'D', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#'], ['0', '0', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#'], ['0', '0', '0', '#', '0', '0', '0', '0', '0', '0', '#', '.', '0', '#', '0', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '0', '#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '0', '.', '0', '#', '#', '.', '#', '0', '0', '#', '0', '0', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '.', '#', '.', '.', '.', '#', '0', '0', '0', '0', '0', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '.', '#', '.', '#', '#', '0', '0', '0', '0', '0', '0', '#', '.', '#', '.', '#', '#', '0', '#', '#', '#', '#', '#', '0'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '.', '#', '0', '0', '0', '0', '0', '0', '0', '#', '.', '#', '.', '.', '.', '#', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '#', '.', '#', '0', '0', '0', '0', '0', '0', '0', '#', '.', '#', '#', '#', '.', '#', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '.', '.', '.', '#', '0', '0', '0', '0', '0', '0', '0', '#', '.', '.', '.', '.', '.', '#', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '.', '#', '0', '0', '0', '0', '#', '#', '#', '0', '0', '0', '#', '#', '#', '#', '#', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '.', '#', '0', '0', '0', '#', '.', '.', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '.', '#', '#', '0', '0', '#', '.', '#', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '.', '.', '.', '#', '0', '#', '.', '#', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '#', '.', '#', '0', '#', '.', '#', '#', '#', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '.', '#', '0', '#', '.', '.', '.', '.', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '#', '#', '0', '#', '#', '.', '#', '0', '0', '#', '#', '#', '#', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0', '#', '.', '.', '.', '#', '.', '.', '.', '#', '0', '0', '0', '0', '0', '#', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '#', '0', '0', '0', '0', '0', '0', '#', '.', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '0', '0', '0', '0', '0', '0', '0', '#', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '#', '.', '#', '#', '#', '#', '#', '#', '0', '0', '0', '0', '0', '#', '#', '#', '0', '0', '#', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '#', '.', '#', '.', '.', '.', '.', '.', '#', '0', '0', '0', '#', '.', '.', '.', '#', '0', '#', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '#', '.', '#', '.', '#', '#', '#', '.', '#', '0', '0', '0', '#', '.', '#', '.', '#', '#', '#', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '#', '.', '.', '.', '#', '0', '#', '.', '#', '0', '0', '0', '#', '.', '#', '.', '.', '.', '.', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '#', '#', '#', '0', '0', '#', '.', '#', '#', '0', '0', '0', '.', '#', '#', '#', '#', '#', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '.', '.', '.', '#', '0', '#', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '0', '.', '#', '#', '#', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '.', '.', '.', '.', '.', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '#', '#', '#', '#', '#', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']]

    for position in world.keys():
        if world[position] == '8':
            goal_position = position

    current_position = (0,0)
    min_steps_dict = dict()
    min_steps_dict[current_position] = 0

    visited_dict = set()
    visited_dict.add(current_position)

    forks = []

    while current_position != goal_position:
        if world[current_position] == '8':
            print(min_steps_dict[current_position])
            break

        up = (current_position[0], current_position[1] - 1)
        down = (current_position[0], current_position[1] + 1)
        left = (current_position[0] - 1, current_position[1])
        right = (current_position[0] + 1, current_position[1])

        possible_moves = [up,down,left,right]
        i = 0
        while i < len(possible_moves):
            candidate_location = possible_moves[i]
            if candidate_location not in world.keys():
                possible_moves.pop(i)
            elif world[candidate_location] == '#':
                possible_moves.pop(i)
            elif world[candidate_location] == '.' and candidate_location in visited_dict:
                min_steps_dict[candidate_location] = min(min_steps_dict[candidate_location], min_steps_dict[current_position] + 1)
                possible_moves.pop(i)
            else:
                i = i + 1

        if len(possible_moves) == 0:
            current_position = forks.pop()
            visited_dict.add(current_position)
            continue
        if len(possible_moves) > 1:
            for i in range(1, len(possible_moves)):
                forks.append(possible_moves[i])
                min_steps_dict[possible_moves[i]] = min_steps_dict[current_position] + 1

        #move to only alternative

        min_steps_dict[possible_moves[0]] = min_steps_dict[current_position] + 1
        visited_dict.add(possible_moves[0])
        current_position = possible_moves[0]

    print(min_steps_dict[goal_position])

    exit(0)



def run_code_with_params(code_input, params,pc=0, rel_base=0):
    current_param = 0
    code = code_input#.copy()
    #print(code)
    i = pc
    relative_base = rel_base
    output = []
    while i < len(code):
        if code[i] == 99:
            break
        op_as_string = str(code[i])
        if len(op_as_string) >1:
            opcode = int(op_as_string[-2:])
        else:
            opcode = int(op_as_string[-1])

        first_param, second_param, third_param = None, None, None
        if len(op_as_string) > 2:
            first_param = process_param(code, op_as_string[-3], code[i+1], relative_base)
            if len(op_as_string) > 3:
                second_param = process_param(code, op_as_string[-4], code[i+2], relative_base)
                if len(op_as_string) > 4:
                    third_param = process_param(code, op_as_string[-5], code[i+3], relative_base)

        if opcode == 1:
            if first_param is None:
                first_param = code[code[i + 1]]
            if second_param is None:
                second_param = code[code[i+2]]
            if len(op_as_string) < 5 or op_as_string[-5] == '0':
                code[code[i+3]] = first_param + second_param
            else:
                code[code[i + 3] + relative_base] = first_param + second_param
            i = i + 4
            continue
        if opcode == 2:
            if first_param is None:
                first_param = code[code[i + 1]]
            if second_param is None:
                second_param = code[code[i+2]]
            if len(op_as_string) < 5 or op_as_string[-5] == '0':
                code[code[i+3]] = first_param * second_param
            else:
                code[code[i + 3] + relative_base] = first_param * second_param
            i = i + 4
            continue
        if opcode == 3:
            if len(op_as_string) <3 or op_as_string[-3] == '0':
                code[code[i+1]] = params[current_param]
            else:
                code[code[i + 1] + relative_base] = params[current_param]
            current_param = current_param + 1
            i = i + 2
            continue
        if opcode == 4:
            if first_param is None:
                first_param = code[code[i + 1]]
            #print(first_param)
            #output.append(first_param)
            i = i + 2
            return (first_param,i,relative_base)
            continue
        if opcode == 5:
            if first_param is None:
                first_param = code[code[i + 1]]
            if second_param is None:
                second_param = code[code[i+2]]
            if first_param != 0:
                i = second_param
                continue
            else:
                i = i + 3
                continue
        if opcode == 6:
            if first_param is None:
                first_param = code[code[i + 1]]
            if second_param is None:
                second_param = code[code[i + 2]]
            if first_param == 0:
                i = second_param
                continue
            else:
                i = i + 3
                continue
        if opcode == 7:
            if first_param is None:
                first_param = code[code[i + 1]]
            if second_param is None:
                second_param = code[code[i + 2]]
            if first_param < second_param:
                op_result = 1
            else:
                op_result = 0
            if len(op_as_string) < 5 or op_as_string[-5] == '0':
                code[code[i + 3]] = op_result
            else:
                code[code[i + 3]+relative_base] = op_result
            i = i + 4
        if opcode == 8:
            if first_param is None:
                first_param = code[code[i + 1]]
            if second_param is None:
                second_param = code[code[i + 2]]
            if first_param == second_param:
                op_result = 1
            else:
                op_result = 0
            if len(op_as_string) < 5 or op_as_string[-5] == '0':
                code[code[i + 3]] = op_result
            else:
                code[code[i + 3] + relative_base] = op_result
            i = i + 4
        if opcode == 9:
            if first_param is None:
                first_param = code[code[i + 1]]
            relative_base = relative_base + first_param
            i = i + 2
        if opcode == 99:
            print('HALT OP')
            return (-1, -1, -1)
            break

    return  -1, -1,-1


def process_param(code, param_char, param_value, relative_base):
    if param_char == '0':
        first_param = code[param_value]
    elif param_char == '1':
        first_param = param_value
    elif param_char == '2':
        first_param = code[param_value + relative_base]
    return first_param


def try_combination(combination, input_code):
    codes = []
    pcs = []
    for i in range(5):
        codes.append(input_code.copy())
        pcs.append(0)

    previous_output = 0
    current_outputs = [0]*5

    while pcs[4] != -1:
        for i in range(len(combination)):
            phase_value = combination[i]
            previous_output, pc = run_code_with_params(codes[i], [phase_value,previous_output] if pcs[i] == 0 else [previous_output], pcs[i])
            pcs[i] = pc
            if pc != -1:
                current_outputs[i] = previous_output

    return current_outputs[4]

if __name__ == '__main__':
    print("day fifteen")

    #find_path()
    oxygen_fill()

    code = []
    with open('day_15.txt', 'r') as input_file:
        line = input_file.readline()
        ops = line.split(',')
        for op in ops:
            code.append(int(op))

    for i in range(100000):
        code.append(0)


    current_position = (0,0)

    current_direction = 0 # 0=up, 1=right, 2=down, 3=left

    current_tile_color = 1 # 0=black, 1=white

    out_pc=0
    out_rel_base=0

    paint_dict = dict()

    min_x = 10000
    min_y = 10000
    max_x = -1000
    max_y = -1000
    '''
    min_x = -15
    min_y = -15
    max_x = 15
    max_y = 15
    '''
    up, down, left, right, finish = False, False, False, False, False
    move = -1
    x = 0
    y = 0
    visited_dict = dict()
    while out_pc != -1 and not finish:

        sleep(0.1)
        while move == -1:

            up = keyboard.is_pressed('i')
            down = keyboard.is_pressed('k')
            left = keyboard.is_pressed('j')
            right = keyboard.is_pressed('l')
            finish = keyboard.is_pressed('c')
            if up:
                move = 1
            elif down:
                move = 2
            elif right:
                move = 4
            elif left:
                move = 3
        '''
        up_coord = (x, y -1)
        if up_coord not in visited_dict.keys():
            move =1
            status, out_pc, out_rel_base = run_code_with_params(code, [move], out_pc, out_rel_base)
            if status != 0:
                x = up_coord[0]
                y = up_coord[1]
                if status == 1:
                    paint_dict[(up_coord[0], up_coord[1])] = '.'
                else:
                    paint_dict[(up_coord[0], up_coord[1])] = '8'
                    break
                move = 2
                status, out_pc, out_rel_base = run_code_with_params(code, [move], out_pc, out_rel_base)
            else:
                paint_dict[(up_coord[0], up_coord[1])] = '#'
        '''


        print('moving ' + str(move))
        status, out_pc, out_rel_base = run_code_with_params(code, [move], out_pc, out_rel_base)
        if out_pc == -1:
            break
        try_x = x
        try_y = y
        if move == 1:
            try_y = y - 1
        elif move == 2:
            try_y = y + 1
        elif move == 3:
            try_x = x - 1
        elif move == 4:
            try_x = x + 1

        print(status)

        if status != 0:
            x = try_x
            y = try_y
            if status == 1:
                paint_dict[(try_x, try_y)] = '.'
            else:
                paint_dict[(try_x, try_y)] = '8'
        else:
            paint_dict[(try_x,try_y)] = '#'

        if try_x > max_x:
            max_x  = try_x
        if try_x < min_x:
            min_x = try_x
        if try_y > max_y:
            max_y = try_y
        if try_y < min_y:
            min_y = try_y
        move = -1

        print((min_x,max_x,min_y,max_y))

        image = []
        for i in range(min_y,max_y+1):
            image.append([])
            for j in range(min_x,max_x+1):
                value = 0 if (j, i) not in paint_dict.keys() else paint_dict[(j, i)]
                if j == x and i == y:
                    value = 'D'
                #char = ' ' if value == 0 else '#'
                char = str(value)
                image[i - min_y].append(char)

            print(image[i-min_y])

        points_to_explore = []


        height = len(image)
        if height > 0:
            width = len(image[0])
            for i in range(len(image)):
                for j in range(len(image[i])):
                    if image[i][j] == '.' or image[i][j] == 'D':
                        if i == 0 or j == 0 or i == (height-1) or j == (width-1):
                            points_to_explore.append((i,j))
                        elif image[i-1][j] =='0' or image[i+1][j] =='0' or image[i][j-1] =='0' or image[i][j+1] =='0':
                            points_to_explore.append((i, j))

        print(points_to_explore)









        #-16,-14
    print('--------------------------')
    print(paint_dict)
    print('--------------------------')
    print(image)
